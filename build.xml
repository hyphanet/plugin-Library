<?xml version="1.0"?>
<!-- ant build file for Freenet -->

<project name="plugins-Library" default="dist" basedir=".">
	<property name="freenet-cvs-snapshot.location" location="../fred/dist/freenet.jar"/>
	<property name="freenet-ext.location" location="../fred/lib/freenet/freenet-ext.jar"/>
	<property name="source-version" value="1.6"/>
	<property name="target-version" value="1.6"/>
	<property name="build" location="build/"/>
	<property name="build-test" location="build-test/"/>
	<property name="run-test" location="run-test/"/>
	<property name="tmp" location="tmp/"/>
	<property name="dist" location="dist/"/>
	<property name="javadoc" location="javadoc/"/>
	<property name="junit.location" value="/usr/share/java/junit.jar"/>
	<property name="packagebase" value="plugins.Library" />
	<property name="minNodeVersion" value="1239"/>

	<property name="version.src" value="plugins/Library/Version.java" />
	<property name="version.build" value="plugins/Library/Version.class" />
	<available file="src/${version.src}" property="version.present"/>
	<available file="${junit.location}" property="junit.present"/>

	<path id="lib.path">
		<pathelement location="${freenet-ext.location}"/>
		<pathelement location="${freenet-cvs-snapshot.location}"/>
		<fileset dir="lib/">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<!-- ================================================== -->
	<target name="setver" if="version.present">
		<!-- Update the Version.java file in ${build}-->
		<copy file="src/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
		<delete file="${build}/${version.build}"/>
		<replace file="${build}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>
	</target>

	<!-- ================================================== -->
	<target name="compile" depends="mkdir,build-dep,setver">
		<tstamp/>

		<javac srcdir="src/" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<!--<compilerarg value="-Xlint"/>-->
			<sourcepath>
				<pathelement path="${build}"/>
			</sourcepath>
			<classpath>
				<path refid="lib.path"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/package-info.java"/>
			<exclude name="${version.src}"/>
		</javac>

		<!-- Force compile of Version.java in case compile of ${src} didn't trigger it -->
		<javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="1.5" target="1.5">
			<classpath>
				<path refid="lib.path"/>
			</classpath>
			<include name="${version.src}"/>
		</javac>

		<!-- Copy web interface static files to the build dir -->
		<copy todir="${build}/plugins/Library/ui/staticfiles">
			<fileset dir="src/plugins/Library/ui/staticfiles"/>
		</copy>
		<assertions><enable/></assertions>
	</target>

	<target name="compile-tester" depends="compile" if="tester">
		<javac srcdir="test/" destdir="${build}" debug="on" optimize="on" source="1.5" target="1.5">
			<classpath>
				<path refid="lib.path"/>
				<!-- Uses some code that uses junit -->
				<pathelement location="${junit.location}"/>
			</classpath>
			<include name="plugins/Library/Tester.java"/>
		</javac>
	</target>

	<target name="delete-tester" depends="compile" unless="tester">
		<delete verbose="true">
			<fileset dir="${build}" includes="plugins/Library/Tester.* plugins/Library/Tester$*" />
		</delete>
	</target>

	<target name="run" depends="dist">
		<java classname="${packagebase}.ui.TestInterface">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="${dist}/Library.jar"/>
			</classpath>
		</java>
	</target>

	<!-- ================================================== -->
	<target name="unit-build" depends="compile" if="junit.present" unless="skip_tests">
		<javac srcdir="test/" destdir="${build-test}" debug="on" optimize="on" source="1.5">
			<classpath>
				<path refid="lib.path"/>
				<pathelement path="${build}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*.java"/>
		</javac>
	</target>

	<target name="junit" depends="unit-build" if="junit.present" unless="skip_tests">
		<delete dir="${run-test}"/>
		<mkdir dir="${run-test}"/>
		<junit printsummary="yes" fork="yes" haltonfailure="yes" dir="${run-test}" showoutput="yes">
			<classpath>
				<path refid="lib.path"/>
				<pathelement path="${build}"/>
				<pathelement path="${build-test}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<assertions><enable/></assertions>
			<formatter type="plain" usefile="false"/>
			<batchtest fork="yes">
				<fileset dir="${build-test}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="benchmark" value="${benchmark}" />
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
		</junit>
	</target>

	<!-- ================================================== -->
	<target name="jar" depends="compile,compile-tester,delete-tester,junit" description="create a jar package">
		<jar jarfile="${dist}/Library.jar" duplicate="fail">
			<manifest>
				<attribute name="Main-Class" value="${packagebase}.ui.TestInterface"/>
				<attribute name="Plugin-Main-Class" value="${packagebase}.Main"/>
				<attribute name="Required-Node-Version" value="${minNodeVersion}"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="**/*.txt"/>
				<include name="**/*.properties"/>
			</fileset>
			<fileset dir="${build}/">
				<exclude name="${version.src}"/>
			</fileset>
			<zipgroupfileset dir="lib/" includes="**/*.jar"/>
		</jar>
	</target>

	<!-- ================================================== -->
	<target name="javadoc" description="generate javadocs" depends="build-dep">
		<delete dir="${javadoc}"/>
		<javadoc classpathref="lib.path" destdir="${javadoc}" author="true" version="true" use="true" private="true">
			<doclet name="info.bliki.doclet.standard.Standard" path="doc/bliki-doclet.jar"/>
			<!--<doclet name="com.visural.doclets.markdown.standard.Standard" path="doc/MarkdownDoclet.jar"/>-->
			<fileset dir="src/" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
			<link href="http://freenet.github.com/fred-staging/api"/>
			<link href="http://snakeyamlrepo.appspot.com/releases/1.5/site/apidocs"/>
		</javadoc>
	</target>

	<!-- ================================================== -->
	<target name="dist" depends="clean,jar" description="generate the distribution from scratch">
	</target>

	<!-- ================================================== -->
	<target name="clean" description="Delete class files and docs dir.">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${run-test}"/>
		<delete dir="${dist}"/>
	</target>

</project>
